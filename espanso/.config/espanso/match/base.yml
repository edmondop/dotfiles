# espanso match file

# For a complete introduction, visit the official docs at: https://espanso.org/docs/

# You can use this file to define the base matches (aka snippets)
# that will be available in every application when using espanso.

# Matches are substitution rules: when you type the "trigger" string
# it gets replaced by the "replace" string.
matches:
  # Simple text replacement
  - trigger: ":espanso"
    replace: "Hi there!"

  # NOTE: espanso uses YAML to define matches, so pay attention to the indentation!

  # But matches can also be dynamic:

  # Print the current date
  - trigger: ":date"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%m/%d/%Y"

  # Print the output of a shell command
  - trigger: ":shell"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "echo 'Hello from your shell'"

  - trigger: ":chatgpt-note"
    replace: |
      Remember to follow best practices for writing a Note for my Obsidian Vault:
      - Avoid being redundant, sometimes you discuss the same aspect twice
      - Avoid obvious technical facts (i.e. the trade-off between latency and throughput) but feel free to provide complex technical insights,
      as well as code examples if applicable. Feel also free to expand on the root cause (i.e. why it is unfeasible to invert a scalar product on an elliptic curve? And you explain about scalar products, sum on an elliptic curve, etc)
      - Avoid using styles for headers. Avoid a title, Obsidian will assign one. Starts paragraphs from H2/##
      - Avoid using Math formulas with \ . Obsidian supports the $$ syntax. Try to use UTF characters for simple expressions (dot product?)
      - Use paragraph to organize the thoughts into self-contained sections, and use titles with headers.
      - Avoid bullet point lists except for finite sets (i.e. days of the week)
      - Do not include a final conclusion
      - Use bold to highlights the most **important** words
      - When you are listing multiple options, please be sure that the most important differences are immediately clear (i.e. a Rust library that is sync vs async)
      - Use code examples
  - trigger: ":whoami-prompt"
    replace: |
      My name is Edmondo and you can call me Ed. 
      I am a software engineer with more than 15 years of experience. I started working
      as a full stack in 2008 on Java, then I did a lot of Scala. I worked at Goldman
      Sachs between 2014 and 2016, and between 2010 and 2014 at a brokerage firm.
      In between 2016 and 2021 I was CTO of a fintech I co-founded, which we started
      on AWS using ECS. We later migrated to Kubernetes using Kops first and later 
      EKS. I have worked therefore extensively with Docker, Kubernetes, Kafka,
      Scala, Python, CQRS, Rust, Spark, Databricks and much more. However,
      as each engineer, I have gaps and I am asking your help to learn.
      I want you to be really concise, and really go deep. Cut the fluff.
      Provide examples, if applicable, code examples. Compare and contrast.
